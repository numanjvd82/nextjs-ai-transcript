datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  email          String          @unique
  passwordHash   String
  meetings       Meeting[]
  transcripts    Transcript[]
  summaries      Summary[]
  blockchainLogs BlockchainLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Meeting {
  id          Int            @id @default(autoincrement())
  title       String
  createdAt   DateTime       @default(now())
  host        User           @relation(fields: [hostId], references: [id])
  hostId      Int
  transcripts Transcript[]
  summaries   Summary[]
  blockchain  BlockchainLog?
}

model Transcript {
  id        Int  @id @default(autoincrement())
  userId    Int
  meetingId Int?

  // Core data
  content  String // transcription text
  audioUrl String // URL/path to stored mp3 file (S3, local, etc.)

  // Metadata
  detectedLang    String? // ISO code, e.g. "en", "ur", "es"
  sentiment       String? // e.g. "positive", "neutral", "negative"
  confidenceScore Float? // transcription model confidence (0-1)
  durationSec     Int? // length of audio in seconds

  // For ML training
  embedding Json? // vector embedding (for semantic search or clustering)
  labels    String[] // tags, e.g. ["customer-support", "complaint"]

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  meeting Meeting? @relation(fields: [meetingId], references: [id])
}

model Summary {
  id        Int    @id @default(autoincrement())
  userId    Int
  summary   String
  meetingId Int

  meeting Meeting @relation(fields: [meetingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model BlockchainLog {
  id        Int    @id @default(autoincrement())
  userId    Int
  txHash    String
  meetingId Int    @unique

  user    User    @relation(fields: [userId], references: [id])
  meeting Meeting @relation(fields: [meetingId], references: [id])
}
